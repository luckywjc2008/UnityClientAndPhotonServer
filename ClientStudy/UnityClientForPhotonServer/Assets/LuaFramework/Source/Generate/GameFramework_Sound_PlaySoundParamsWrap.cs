//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_Sound_PlaySoundParamsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.Sound.PlaySoundParams), typeof(System.Object));
		L.RegFunction("New", _CreateGameFramework_Sound_PlaySoundParams);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Time", get_Time, set_Time);
		L.RegVar("MuteInSoundGroup", get_MuteInSoundGroup, set_MuteInSoundGroup);
		L.RegVar("Loop", get_Loop, set_Loop);
		L.RegVar("Priority", get_Priority, set_Priority);
		L.RegVar("VolumeInSoundGroup", get_VolumeInSoundGroup, set_VolumeInSoundGroup);
		L.RegVar("FadeInSeconds", get_FadeInSeconds, set_FadeInSeconds);
		L.RegVar("Pitch", get_Pitch, set_Pitch);
		L.RegVar("PanStereo", get_PanStereo, set_PanStereo);
		L.RegVar("SpatialBlend", get_SpatialBlend, set_SpatialBlend);
		L.RegVar("MaxDistance", get_MaxDistance, set_MaxDistance);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_Sound_PlaySoundParams(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameFramework.Sound.PlaySoundParams obj = new GameFramework.Sound.PlaySoundParams();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.Sound.PlaySoundParams.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.Time;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Time on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MuteInSoundGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			bool ret = obj.MuteInSoundGroup;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MuteInSoundGroup on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Loop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			bool ret = obj.Loop;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Loop on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Priority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			int ret = obj.Priority;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Priority on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VolumeInSoundGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.VolumeInSoundGroup;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VolumeInSoundGroup on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FadeInSeconds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.FadeInSeconds;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FadeInSeconds on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pitch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.Pitch;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Pitch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PanStereo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.PanStereo;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PanStereo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpatialBlend(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.SpatialBlend;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SpatialBlend on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float ret = obj.MaxDistance;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxDistance on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Time(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Time = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Time on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MuteInSoundGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MuteInSoundGroup = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MuteInSoundGroup on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Loop(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Loop = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Loop on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Priority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Priority = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Priority on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VolumeInSoundGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.VolumeInSoundGroup = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VolumeInSoundGroup on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FadeInSeconds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.FadeInSeconds = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index FadeInSeconds on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pitch(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Pitch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Pitch on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PanStereo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.PanStereo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index PanStereo on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SpatialBlend(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SpatialBlend = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SpatialBlend on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxDistance(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.Sound.PlaySoundParams obj = (GameFramework.Sound.PlaySoundParams)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxDistance = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxDistance on a nil value" : e.Message);
		}
	}
}


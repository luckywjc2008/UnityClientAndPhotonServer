//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StarForce_BuildInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(StarForce.BuildInfo), typeof(System.Object));
		L.RegFunction("New", _CreateStarForce_BuildInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("GameVersion", get_GameVersion, set_GameVersion);
		L.RegVar("InternalGameVersion", get_InternalGameVersion, set_InternalGameVersion);
		L.RegVar("InternalVersion", get_InternalVersion, set_InternalVersion);
		L.RegVar("CheckVersionUrl", get_CheckVersionUrl, set_CheckVersionUrl);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateStarForce_BuildInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				StarForce.BuildInfo obj = new StarForce.BuildInfo();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: StarForce.BuildInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			string ret = obj.GameVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InternalGameVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			int ret = obj.InternalGameVersion;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InternalGameVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InternalVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			int ret = obj.InternalVersion;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InternalVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CheckVersionUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			string ret = obj.CheckVersionUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CheckVersionUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.GameVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index GameVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InternalGameVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InternalGameVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InternalGameVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InternalVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InternalVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InternalVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CheckVersionUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StarForce.BuildInfo obj = (StarForce.BuildInfo)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.CheckVersionUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CheckVersionUrl on a nil value" : e.Message);
		}
	}
}


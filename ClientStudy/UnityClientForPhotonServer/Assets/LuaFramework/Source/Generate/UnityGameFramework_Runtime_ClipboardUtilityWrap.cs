//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_ClipboardUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("ClipboardUtility");
		L.RegFunction("CopyToClipboard", CopyToClipboard);
		L.RegVar("ClipboardInstance_", get_ClipboardInstance_, set_ClipboardInstance_);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyToClipboard(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityGameFramework.Runtime.ClipboardUtility.CopyToClipboard(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClipboardInstance_(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UnityGameFramework.Runtime.ClipboardUtility.ClipboardInstance_);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ClipboardInstance_(IntPtr L)
	{
		try
		{
			UnityGameFramework.Runtime.IClipboardBase arg0 = (UnityGameFramework.Runtime.IClipboardBase)ToLua.CheckObject(L, 2, typeof(UnityGameFramework.Runtime.IClipboardBase));
			UnityGameFramework.Runtime.ClipboardUtility.ClipboardInstance_ = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


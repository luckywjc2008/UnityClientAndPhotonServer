//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_DataNodeComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("GetData", GetData);
		L.RegFunction("SetData", SetData);
		L.RegFunction("GetNode", GetNode);
		L.RegFunction("GetOrAddNode", GetOrAddNode);
		L.RegFunction("RemoveNode", RemoveNode);
		L.RegFunction("Clear", Clear);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Root", get_Root, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.Variable o = obj.GetData(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.DataNode.IDataNode)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.DataNode.IDataNode arg1 = (GameFramework.DataNode.IDataNode)ToLua.ToObject(L, 3);
				GameFramework.Variable o = obj.GetData(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.DataNodeComponent.GetData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.Variable)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.Variable arg1 = (GameFramework.Variable)ToLua.ToObject(L, 3);
				obj.SetData(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.Variable)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.Variable arg1 = (GameFramework.Variable)ToLua.ToObject(L, 3);
				obj.SetData(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.Variable), typeof(GameFramework.DataNode.IDataNode)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.Variable arg1 = (GameFramework.Variable)ToLua.ToObject(L, 3);
				GameFramework.DataNode.IDataNode arg2 = (GameFramework.DataNode.IDataNode)ToLua.ToObject(L, 4);
				obj.SetData(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.Variable), typeof(GameFramework.DataNode.IDataNode)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.Variable arg1 = (GameFramework.Variable)ToLua.ToObject(L, 3);
				GameFramework.DataNode.IDataNode arg2 = (GameFramework.DataNode.IDataNode)ToLua.ToObject(L, 4);
				obj.SetData(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.DataNodeComponent.SetData");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.DataNode.IDataNode o = obj.GetNode(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.DataNode.IDataNode)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.DataNode.IDataNode arg1 = (GameFramework.DataNode.IDataNode)ToLua.ToObject(L, 3);
				GameFramework.DataNode.IDataNode o = obj.GetNode(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.DataNodeComponent.GetNode");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetOrAddNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.DataNode.IDataNode o = obj.GetOrAddNode(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.DataNode.IDataNode)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.DataNode.IDataNode arg1 = (GameFramework.DataNode.IDataNode)ToLua.ToObject(L, 3);
				GameFramework.DataNode.IDataNode o = obj.GetOrAddNode(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.DataNodeComponent.GetOrAddNode");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveNode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.RemoveNode(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent), typeof(string), typeof(GameFramework.DataNode.IDataNode)))
			{
				UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GameFramework.DataNode.IDataNode arg1 = (GameFramework.DataNode.IDataNode)ToLua.ToObject(L, 3);
				obj.RemoveNode(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.DataNodeComponent.RemoveNode");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.DataNodeComponent));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Root(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DataNodeComponent obj = (UnityGameFramework.Runtime.DataNodeComponent)o;
			GameFramework.DataNode.IDataNode ret = obj.Root;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Root on a nil value" : e.Message);
		}
	}
}


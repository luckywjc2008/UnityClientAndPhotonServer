//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_DebuggerComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.DebuggerComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("RegisterDebuggerWindow", RegisterDebuggerWindow);
		L.RegFunction("GetDebuggerWindow", GetDebuggerWindow);
		L.RegFunction("SelectDebuggerWindow", SelectDebuggerWindow);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ActiveWindow", get_ActiveWindow, set_ActiveWindow);
		L.RegVar("ShowFullWindow", get_ShowFullWindow, set_ShowFullWindow);
		L.RegVar("IconRect", get_IconRect, set_IconRect);
		L.RegVar("WindowRect", get_WindowRect, set_WindowRect);
		L.RegVar("WindowScale", get_WindowScale, set_WindowScale);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterDebuggerWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.DebuggerComponent));
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Debugger.IDebuggerWindow arg1 = (GameFramework.Debugger.IDebuggerWindow)ToLua.CheckObject(L, 3, typeof(GameFramework.Debugger.IDebuggerWindow));
			object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
			obj.RegisterDebuggerWindow(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDebuggerWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.DebuggerComponent));
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Debugger.IDebuggerWindow o = obj.GetDebuggerWindow(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SelectDebuggerWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.DebuggerComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SelectDebuggerWindow(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ActiveWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			bool ret = obj.ActiveWindow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ActiveWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ShowFullWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			bool ret = obj.ShowFullWindow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ShowFullWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IconRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			UnityEngine.Rect ret = obj.IconRect;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IconRect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WindowRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			UnityEngine.Rect ret = obj.WindowRect;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WindowRect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WindowScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			float ret = obj.WindowScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WindowScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ActiveWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ActiveWindow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ActiveWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ShowFullWindow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.ShowFullWindow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ShowFullWindow on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IconRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 2, typeof(UnityEngine.Rect));
			obj.IconRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IconRect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WindowRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 2, typeof(UnityEngine.Rect));
			obj.WindowRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WindowRect on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WindowScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.DebuggerComponent obj = (UnityGameFramework.Runtime.DebuggerComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WindowScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index WindowScale on a nil value" : e.Message);
		}
	}
}


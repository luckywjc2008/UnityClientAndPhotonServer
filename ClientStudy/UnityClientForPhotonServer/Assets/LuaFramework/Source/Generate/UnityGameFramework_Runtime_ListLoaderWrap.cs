//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_ListLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.ListLoader), typeof(System.Object));
		L.RegFunction("Add", Add);
		L.RegFunction("StartLoad", StartLoad);
		L.RegFunction("New", _CreateUnityGameFramework_Runtime_ListLoader);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_loadAssetCallbacks", get_m_loadAssetCallbacks, set_m_loadAssetCallbacks);
		L.RegVar("m_loadAssetBundleCallbacks", get_m_loadAssetBundleCallbacks, set_m_loadAssetBundleCallbacks);
		L.RegVar("OneFinished", get_OneFinished, set_OneFinished);
		L.RegVar("ListFinished", get_ListFinished, set_ListFinished);
		L.RegFunction("ListFinishedHandler", UnityGameFramework_Runtime_ListLoader_ListFinishedHandler);
		L.RegFunction("FinishedHandler", UnityGameFramework_Runtime_ListLoader_FinishedHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityGameFramework_Runtime_ListLoader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ListLoader.LoadMode arg0 = (UnityGameFramework.Runtime.ListLoader.LoadMode)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ListLoader.LoadMode));
				GameFramework.Resource.LoadAssetCallbacks arg1 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.CheckObject(L, 2, typeof(GameFramework.Resource.LoadAssetCallbacks));
				UnityGameFramework.Runtime.ListLoader obj = new UnityGameFramework.Runtime.ListLoader(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityGameFramework.Runtime.ListLoader.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Add(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ListLoader));
			string arg0 = ToLua.CheckString(L, 2);
			obj.Add(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ListLoader));
			obj.StartLoad();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_loadAssetCallbacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)o;
			GameFramework.Resource.LoadAssetCallbacks ret = obj.m_loadAssetCallbacks;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_loadAssetCallbacks on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_loadAssetBundleCallbacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)o;
			GameFramework.Resource.LoadAssetBundleCallbacks ret = obj.m_loadAssetBundleCallbacks;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_loadAssetBundleCallbacks on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OneFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UnityGameFramework.Runtime.ListLoader.OneFinished"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ListFinished(IntPtr L)
	{
		ToLua.Push(L, new EventObject("UnityGameFramework.Runtime.ListLoader.ListFinished"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_loadAssetCallbacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)o;
			GameFramework.Resource.LoadAssetCallbacks arg0 = (GameFramework.Resource.LoadAssetCallbacks)ToLua.CheckObject(L, 2, typeof(GameFramework.Resource.LoadAssetCallbacks));
			obj.m_loadAssetCallbacks = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_loadAssetCallbacks on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_loadAssetBundleCallbacks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)o;
			GameFramework.Resource.LoadAssetBundleCallbacks arg0 = (GameFramework.Resource.LoadAssetBundleCallbacks)ToLua.CheckObject(L, 2, typeof(GameFramework.Resource.LoadAssetBundleCallbacks));
			obj.m_loadAssetBundleCallbacks = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_loadAssetBundleCallbacks on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OneFinished(IntPtr L)
	{
		try
		{
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ListLoader));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityGameFramework.Runtime.ListLoader.OneFinished' can only appear on the left hand side of += or -= when used outside of the type 'UnityGameFramework.Runtime.ListLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				UnityGameFramework.Runtime.ListLoader.FinishedHandler ev = (UnityGameFramework.Runtime.ListLoader.FinishedHandler)DelegateFactory.CreateDelegate(typeof(UnityGameFramework.Runtime.ListLoader.FinishedHandler), arg0.func);
				obj.OneFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UnityGameFramework.Runtime.ListLoader.FinishedHandler ev = (UnityGameFramework.Runtime.ListLoader.FinishedHandler)LuaMisc.GetEventHandler(obj, typeof(UnityGameFramework.Runtime.ListLoader), "OneFinished");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UnityGameFramework.Runtime.ListLoader.FinishedHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.OneFinished -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ListFinished(IntPtr L)
	{
		try
		{
			UnityGameFramework.Runtime.ListLoader obj = (UnityGameFramework.Runtime.ListLoader)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ListLoader));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'UnityGameFramework.Runtime.ListLoader.ListFinished' can only appear on the left hand side of += or -= when used outside of the type 'UnityGameFramework.Runtime.ListLoader'");
			}

			if (arg0.op == EventOp.Add)
			{
				UnityGameFramework.Runtime.ListLoader.ListFinishedHandler ev = (UnityGameFramework.Runtime.ListLoader.ListFinishedHandler)DelegateFactory.CreateDelegate(typeof(UnityGameFramework.Runtime.ListLoader.ListFinishedHandler), arg0.func);
				obj.ListFinished += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				UnityGameFramework.Runtime.ListLoader.ListFinishedHandler ev = (UnityGameFramework.Runtime.ListLoader.ListFinishedHandler)LuaMisc.GetEventHandler(obj, typeof(UnityGameFramework.Runtime.ListLoader), "ListFinished");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (UnityGameFramework.Runtime.ListLoader.ListFinishedHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.ListFinished -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityGameFramework_Runtime_ListLoader_ListFinishedHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityGameFramework.Runtime.ListLoader.ListFinishedHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityGameFramework.Runtime.ListLoader.ListFinishedHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityGameFramework_Runtime_ListLoader_FinishedHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityGameFramework.Runtime.ListLoader.FinishedHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityGameFramework.Runtime.ListLoader.FinishedHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


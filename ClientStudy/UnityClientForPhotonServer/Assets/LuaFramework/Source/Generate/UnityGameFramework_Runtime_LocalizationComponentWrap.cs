//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_LocalizationComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.LocalizationComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("LoadDictionary", LoadDictionary);
		L.RegFunction("ParseDictionary", ParseDictionary);
		L.RegFunction("GetString", GetString);
		L.RegFunction("HasRawString", HasRawString);
		L.RegFunction("GetRawString", GetRawString);
		L.RegFunction("RemoveRawString", RemoveRawString);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Language", get_Language, set_Language);
		L.RegVar("SystemLanguage", get_SystemLanguage, null);
		L.RegVar("DictionaryCount", get_DictionaryCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadDictionary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent), typeof(string), typeof(string)))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.LoadDictionary(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent), typeof(string), typeof(string), typeof(object)))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.LoadDictionary(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.LocalizationComponent.LoadDictionary");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseDictionary(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.ParseDictionary(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent), typeof(string), typeof(object)))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool o = obj.ParseDictionary(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.LocalizationComponent.ParseDictionary");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			string o = obj.GetString(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasRawString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasRawString(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRawString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetRawString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveRawString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.RemoveRawString(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Language(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			GameFramework.Localization.Language ret = obj.Language;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Language on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			GameFramework.Localization.Language ret = obj.SystemLanguage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SystemLanguage on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DictionaryCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			int ret = obj.DictionaryCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DictionaryCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Language(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			GameFramework.Localization.Language arg0 = (GameFramework.Localization.Language)ToLua.CheckObject(L, 2, typeof(GameFramework.Localization.Language));
			obj.Language = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Language on a nil value" : e.Message);
		}
	}
}


//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_SceneComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.SceneComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("SceneIsLoaded", SceneIsLoaded);
		L.RegFunction("GetLoadedSceneAssetNames", GetLoadedSceneAssetNames);
		L.RegFunction("SceneIsLoading", SceneIsLoading);
		L.RegFunction("GetLoadingSceneAssetNames", GetLoadingSceneAssetNames);
		L.RegFunction("SceneIsUnloading", SceneIsUnloading);
		L.RegFunction("GetUnloadingSceneAssetNames", GetUnloadingSceneAssetNames);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("UnloadScene", UnloadScene);
		L.RegFunction("GetSceneName", GetSceneName);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("MainCamera", get_MainCamera, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneIsLoaded(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SceneIsLoaded(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoadedSceneAssetNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent));
			string[] o = obj.GetLoadedSceneAssetNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneIsLoading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SceneIsLoading(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLoadingSceneAssetNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent));
			string[] o = obj.GetLoadingSceneAssetNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SceneIsUnloading(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.SceneIsUnloading(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUnloadingSceneAssetNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent));
			string[] o = obj.GetUnloadingSceneAssetNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.LoadScene(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent), typeof(string), typeof(object)))
			{
				UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.LoadScene(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SceneComponent.LoadScene");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnloadScene(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.UnloadScene(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SceneComponent), typeof(string), typeof(object)))
			{
				UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.UnloadScene(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SceneComponent.UnloadScene");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSceneName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = UnityGameFramework.Runtime.SceneComponent.GetSceneName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.SceneComponent obj = (UnityGameFramework.Runtime.SceneComponent)o;
			UnityEngine.Camera ret = obj.MainCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MainCamera on a nil value" : e.Message);
		}
	}
}


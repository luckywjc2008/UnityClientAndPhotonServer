//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_SoundComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.SoundComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("HasSoundGroup", HasSoundGroup);
		L.RegFunction("GetSoundGroup", GetSoundGroup);
		L.RegFunction("GetAllSoundGroups", GetAllSoundGroups);
		L.RegFunction("AddSoundGroup", AddSoundGroup);
		L.RegFunction("GetAllLoadingSoundSerialIds", GetAllLoadingSoundSerialIds);
		L.RegFunction("IsLoadingSound", IsLoadingSound);
		L.RegFunction("PlaySound", PlaySound);
		L.RegFunction("StopSound", StopSound);
		L.RegFunction("StopAllLoadedSounds", StopAllLoadedSounds);
		L.RegFunction("StopAllLoadingSounds", StopAllLoadingSounds);
		L.RegFunction("PauseSound", PauseSound);
		L.RegFunction("ResumeSound", ResumeSound);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SoundGroupCount", get_SoundGroupCount, null);
		L.RegVar("AudioMixer", get_AudioMixer, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasSoundGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasSoundGroup(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSoundGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent));
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.Sound.ISoundGroup o = obj.GetSoundGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllSoundGroups(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent));
			GameFramework.Sound.ISoundGroup[] o = obj.GetAllSoundGroups();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSoundGroup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(int)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.AddSoundGroup(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(bool), typeof(bool), typeof(float), typeof(int)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 6);
				bool o = obj.AddSoundGroup(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.AddSoundGroup");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllLoadingSoundSerialIds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent));
			int[] o = obj.GetAllLoadingSoundSerialIds();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoadingSound(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.IsLoadingSound(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlaySound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int o = obj.PlaySound(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(UnityEngine.Vector3)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(UnityGameFramework.Runtime.Entity)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityGameFramework.Runtime.Entity arg2 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(GameFramework.Sound.PlaySoundParams)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(object)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				int o = obj.PlaySound(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(GameFramework.Sound.PlaySoundParams), typeof(UnityEngine.Vector3)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(GameFramework.Sound.PlaySoundParams), typeof(UnityGameFramework.Runtime.Entity)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				UnityGameFramework.Runtime.Entity arg3 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 5);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(UnityEngine.Vector3), typeof(object)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(GameFramework.Sound.PlaySoundParams), typeof(object)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(UnityGameFramework.Runtime.Entity), typeof(object)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityGameFramework.Runtime.Entity arg2 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(GameFramework.Sound.PlaySoundParams), typeof(UnityEngine.Vector3), typeof(object)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(string), typeof(string), typeof(GameFramework.Sound.PlaySoundParams), typeof(UnityGameFramework.Runtime.Entity), typeof(object)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				GameFramework.Sound.PlaySoundParams arg2 = (GameFramework.Sound.PlaySoundParams)ToLua.ToObject(L, 4);
				UnityGameFramework.Runtime.Entity arg3 = (UnityGameFramework.Runtime.Entity)ToLua.ToObject(L, 5);
				object arg4 = ToLua.ToVarObject(L, 6);
				int o = obj.PlaySound(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(UnityEngine.Transform), typeof(string), typeof(UnityEngine.AudioClip), typeof(bool), typeof(bool), typeof(float)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.AudioClip arg2 = (UnityEngine.AudioClip)ToLua.ToObject(L, 4);
				bool arg3 = LuaDLL.lua_toboolean(L, 5);
				bool arg4 = LuaDLL.lua_toboolean(L, 6);
				float arg5 = (float)LuaDLL.lua_tonumber(L, 7);
				obj.PlaySound(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.PlaySound");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.StopSound(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(UnityEngine.Transform), typeof(string)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.StopSound(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(int), typeof(float)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.StopSound(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.StopSound");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllLoadedSounds(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				obj.StopAllLoadedSounds();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(float)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				obj.StopAllLoadedSounds(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.StopAllLoadedSounds");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllLoadingSounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent));
			obj.StopAllLoadingSounds();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PauseSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.PauseSound(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(int), typeof(float)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.PauseSound(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.PauseSound");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResumeSound(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.ResumeSound(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.SoundComponent), typeof(int), typeof(float)))
			{
				UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.ResumeSound(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.SoundComponent.ResumeSound");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SoundGroupCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)o;
			int ret = obj.SoundGroupCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SoundGroupCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioMixer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.SoundComponent obj = (UnityGameFramework.Runtime.SoundComponent)o;
			UnityEngine.Audio.AudioMixer ret = obj.AudioMixer;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index AudioMixer on a nil value" : e.Message);
		}
	}
}


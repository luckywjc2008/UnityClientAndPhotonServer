//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_UIComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.UIComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("HasUIGroup", HasUIGroup);
		L.RegFunction("GetUIGroup", GetUIGroup);
		L.RegFunction("GetAllUIGroups", GetAllUIGroups);
		L.RegFunction("AddUIGroup", AddUIGroup);
		L.RegFunction("HasUIForm", HasUIForm);
		L.RegFunction("GetUIForm", GetUIForm);
		L.RegFunction("GetUIForms", GetUIForms);
		L.RegFunction("GetAllLoadedUIForms", GetAllLoadedUIForms);
		L.RegFunction("GetAllLoadingUIFormSerialIds", GetAllLoadingUIFormSerialIds);
		L.RegFunction("IsLoadingUIForm", IsLoadingUIForm);
		L.RegFunction("IsValidUIForm", IsValidUIForm);
		L.RegFunction("OpenUIForm", OpenUIForm);
		L.RegFunction("CloseUIForm", CloseUIForm);
		L.RegFunction("CloseAllLoadedUIForms", CloseAllLoadedUIForms);
		L.RegFunction("CloseAllLoadingUIForms", CloseAllLoadingUIForms);
		L.RegFunction("RefocusUIForm", RefocusUIForm);
		L.RegFunction("SetUIFormInstanceLocked", SetUIFormInstanceLocked);
		L.RegFunction("SetUIFormInstancePriority", SetUIFormInstancePriority);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("UIGroupCount", get_UIGroupCount, null);
		L.RegVar("InstanceAutoReleaseInterval", get_InstanceAutoReleaseInterval, set_InstanceAutoReleaseInterval);
		L.RegVar("InstanceCapacity", get_InstanceCapacity, set_InstanceCapacity);
		L.RegVar("InstanceExpireTime", get_InstanceExpireTime, set_InstanceExpireTime);
		L.RegVar("InstancePriority", get_InstancePriority, set_InstancePriority);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasUIGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasUIGroup(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIGroup(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			string arg0 = ToLua.CheckString(L, 2);
			GameFramework.UI.IUIGroup o = obj.GetUIGroup(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllUIGroups(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			GameFramework.UI.IUIGroup[] o = obj.GetAllUIGroups();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddUIGroup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.AddUIGroup(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string), typeof(int)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				bool o = obj.AddUIGroup(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.AddUIGroup");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.HasUIForm(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.HasUIForm(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.HasUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityGameFramework.Runtime.UIForm o = obj.GetUIForm(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				UnityGameFramework.Runtime.UIForm o = obj.GetUIForm(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.GetUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIForms(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			string arg0 = ToLua.CheckString(L, 2);
			UnityGameFramework.Runtime.UIForm[] o = obj.GetUIForms(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllLoadedUIForms(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			UnityGameFramework.Runtime.UIForm[] o = obj.GetAllLoadedUIForms();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllLoadingUIFormSerialIds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			int[] o = obj.GetAllLoadingUIFormSerialIds();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLoadingUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.IsLoadingUIForm(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.IsLoadingUIForm(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.IsLoadingUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsValidUIForm(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.CheckUnityObject(L, 2, typeof(UnityGameFramework.Runtime.UIForm));
			bool o = obj.IsValidUIForm(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string), typeof(string)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				int o = obj.OpenUIForm(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string), typeof(string), typeof(bool)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				int o = obj.OpenUIForm(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string), typeof(string), typeof(object)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				int o = obj.OpenUIForm(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(string), typeof(string), typeof(bool), typeof(object)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				int o = obj.OpenUIForm(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.OpenUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(UnityGameFramework.Runtime.UIForm)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.ToObject(L, 2);
				obj.CloseUIForm(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(int)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.CloseUIForm(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(UnityGameFramework.Runtime.UIForm), typeof(object)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.CloseUIForm(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(int), typeof(object)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.CloseUIForm(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.CloseUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllLoadedUIForms(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				obj.CloseAllLoadedUIForms();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(object)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.CloseAllLoadedUIForms(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.CloseAllLoadedUIForms");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllLoadingUIForms(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			obj.CloseAllLoadingUIForms();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefocusUIForm(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(UnityGameFramework.Runtime.UIForm)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.ToObject(L, 2);
				obj.RefocusUIForm(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityGameFramework.Runtime.UIComponent), typeof(UnityGameFramework.Runtime.UIForm), typeof(object)))
			{
				UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.ToObject(L, 1);
				UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.RefocusUIForm(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.UIComponent.RefocusUIForm");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUIFormInstanceLocked(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.CheckUnityObject(L, 2, typeof(UnityGameFramework.Runtime.UIForm));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetUIFormInstanceLocked(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetUIFormInstancePriority(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.UIComponent));
			UnityGameFramework.Runtime.UIForm arg0 = (UnityGameFramework.Runtime.UIForm)ToLua.CheckUnityObject(L, 2, typeof(UnityGameFramework.Runtime.UIForm));
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetUIFormInstancePriority(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIGroupCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			int ret = obj.UIGroupCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIGroupCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InstanceAutoReleaseInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			float ret = obj.InstanceAutoReleaseInterval;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceAutoReleaseInterval on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InstanceCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			int ret = obj.InstanceCapacity;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceCapacity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InstanceExpireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			float ret = obj.InstanceExpireTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceExpireTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InstancePriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			int ret = obj.InstancePriority;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstancePriority on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InstanceAutoReleaseInterval(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.InstanceAutoReleaseInterval = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceAutoReleaseInterval on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InstanceCapacity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InstanceCapacity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceCapacity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InstanceExpireTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.InstanceExpireTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstanceExpireTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InstancePriority(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.UIComponent obj = (UnityGameFramework.Runtime.UIComponent)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.InstancePriority = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index InstancePriority on a nil value" : e.Message);
		}
	}
}

